# -*- coding: utf-8 -*-
"""indian-states-data-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U1c0AkUCt2eQ0spvBcWU3NVeXhwcO1cW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd

# Remove all duplicates
df = df.drop_duplicates()

# Reset the index if needed
df = df.reset_index(drop=True)
# Save the cleaned data to a new file if desired
df.to_csv('cleaned_dataset.csv', index=False)

"""# In the preprocessing stage, we loaded the data from the provided CSV file using Pandas.
# This allowed us to easily manipulate and transform the data. We identified and addressed
# missing values, cleaned up inconsistent data, and performed any necessary data type conversions.

"""

# Identify missing values
missing_values = df.isnull().sum()

# Handle missing values
for column in df.columns:
    if df[column].dtype == 'float64':  # Numerical columns
        df[column].fillna(df[column].mean(), inplace=True)
    elif df[column].dtype == 'object':  # Categorical columns
        df[column].fillna(df[column].mode()[0], inplace=True)

# Save the cleaned data to a new file if desired
df.to_csv('updated data set.csv', index=False)

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Access files in Google Drive
path_to_dataset = '/content/drive/My Drive/MyDrive/india-state-wise-data-analysis-cleaned.csv'

"""Task 2: Question and Answer

Q1. What is the literate Rate in top 5 sates and district?
"""

# Sort the data by literacy rate in descending order
df_sorted = df.sort_values(by='Literate', ascending=False)

# Select the top 5 states by literte rate
top5_states = df_sorted.head(5)

# Create a bar graph illustrating the literacy rate in the top 5 states
plt.figure(figsize=(12, 6))
plt.bar(top5_states['State & District'], top5_states['Literate'])
plt.xlabel('State & District')
plt.ylabel('Literate')
plt.title('Top 5 Indian States & District by Literate Rate')
plt.xticks(rotation=45)
plt.show()

"""Q2.What is Male to female Rato across Indain States?"""

# Create a scatter plot to visualize the male-to-female ratio
plt.figure(figsize=(12, 6))
plt.scatter(df['Male'], df['Female'])
plt.xlabel('Male Population')
plt.ylabel('Female Population')
plt.title('Male-to-Female Ratio Across Indian States')
plt.show()

""" Q3.What is the distribution of literate among different age groups?"""

# Assuming you have a DataFrame named 'data' containing the relevant columns
age_groups = ['Age_Group_0_29', 'Age_Group_30_49', 'Age_Group_50']

# Calculate the total literacy for each age group
total_literacy = [df[group].sum() for group in age_groups]

# Create a bar graph
plt.figure(figsize=(10, 6))
plt.bar(age_groups, total_literacy)
plt.xlabel('Age Group')
plt.ylabel('Total Literacy')
plt.title('Distribution of Literacy Among Different Age Groups')
plt.tight_layout()
plt.show()

"""Q4.What is the distribution of religions in the population?

"""

# Assuming that DataFrame named 'df' containing the relevant columns
religions = ['Hindus', 'Muslims', 'Christians', 'Sikhs', 'Buddhists', 'Jains', 'Others_Religions', 'Religion_Not_Stated']

# Calculate the total population for each religion
total_population = [df[religion].sum() for religion in religions]

# Create a bar graph
plt.figure(figsize=(12, 6))
plt.bar(religions, total_population)
plt.xlabel('Religion')
plt.ylabel('Total Population')
plt.title('Distribution of Religions in the Population')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Q5.What is the distribution of workers by gender (Male vs. Female)?"""

gender_groups = ['Male_Workers', 'Female_Workers']
# Calculate the total number of workers by gender
total_workers_by_gender = [df[group].sum() for group in gender_groups]

# Create a bar graph
plt.figure(figsize=(8, 5))
plt.bar(gender_groups, total_workers_by_gender)
plt.xlabel('Gender')
plt.ylabel('Total Workers')
plt.title('Distribution of Workers by Gender')
plt.tight_layout()
plt.show()

"""Q6.What is the distribution of educational levels among the population?"""

education_levels = ['Below_Primary_Education', 'Primary_Education', 'Middle_Education', 'Secondary_Education', 'Higher_Education', 'Graduate_Education', 'Other_Education', 'Illiterate_Education', 'Literate_Education']
# Calculate the total population with each education level
total_population_by_education = [df[level].sum() for level in education_levels]

# Create a bar graph
plt.figure(figsize=(12, 6))
plt.bar(education_levels, total_population_by_education)
plt.xlabel('Education Level')
plt.ylabel('Total Population')
plt.title('Distribution of Educational Levels Among the Population')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Q 7. What is the distribution of household amenities like LPG or PNG, electric lighting, and internet?"""

amenities = ['LPG_or_PNG_Households', 'Housholds_with_Electric_Lighting', 'Households_with_Internet']

# Calculate the total households with each amenity
total_households_by_amenity = [df[amenity].sum() for amenity in amenities]

# Create a bar graph
plt.figure(figsize=(10, 6))
plt.bar(amenities, total_households_by_amenity)
plt.xlabel('Amenity')
plt.ylabel('Total Households')
plt.title('Distribution of Household Amenities')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Q8. What is the religious composition of the population?"""

religions = ['Hindus', 'Muslims', 'Christians', 'Sikhs', 'Buddhists', 'Jains', 'Others_Religions', 'Religion_Not_Stated']

# Calculate the total population for each religion
total_population_by_religion = [df[religion].sum() for religion in religions]

# Create a bar graph
plt.figure(figsize=(12, 6))
plt.bar(religions, total_population_by_religion)
plt.xlabel('Religion')
plt.ylabel('Total Population')
plt.title('Religious Composition of the Population')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Q 9.What is the distribution of age groups in the population?"""

age_groups = ['Age_Group_0_29', 'Age_Group_30_49', 'Age_Group_50']

# Calculate the total population for each age group
total_population_by_age_group = [df[group].sum() for group in age_groups]

# Create a bar graph
plt.figure(figsize=(8, 5))
plt.bar(age_groups, total_population_by_age_group)
plt.xlabel('Age Group')
plt.ylabel('Total Population')
plt.title('Distribution of Age Groups in the Population')
plt.tight_layout()
plt.show()

"""Q10.  What is the distribution of workers by their work type (main workers, marginal workers, non-workers)?"""

work_types = ['Main_Workers', 'Marginal_Workers', 'Non_Workers']

# Calculate the total population for each work type
total_population_by_work_type = [df[work_type].sum() for work_type in work_types]

# Create a bar graph
plt.figure(figsize=(10, 6))
plt.bar(work_types, total_population_by_work_type)
plt.xlabel('Work Type')
plt.ylabel('Total Population')
plt.title('Distribution of Workers by Work Type')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Q11. Is there any correlation between the level of education and the type of work individuals are engaged in?"""

# Assuming you have a DataFrame named 'data' containing the relevant columns
education_levels = ['Below_Primary_Education', 'Primary_Education', 'Middle_Education',
                    'Secondary_Education', 'Higher_Education', 'Graduate_Education', 'Other_Education']

# Calculate the total number of workers in each education level category
total_workers_by_education = df[education_levels].sum()

# Create a bar graph
plt.figure(figsize=(12, 6))
total_workers_by_education.plot(kind='bar')
plt.xlabel('Education Level')
plt.ylabel('Total Workers')
plt.title('Distribution of Workers by Education Level')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""# Database Schema Creation Documentation

#Once you've prepared the data, create a MySQL database schema that reflects the relationships between different tables. Create primary keys, foreign keys, and the structure of each table. This will involve designing tables based on the processed data.
# We used primary keys to uniquely identify rows in each table establish on "States & District"
# relationships between tables. The schema ensures data integrity and allows us to maintain. They create three table based on the relationship between then

# - Primary keys were defined for each table to ensure uniqueness.


# Data Population Documentation

# The data population stage involved inserting data from the preprocessed CSV into the
# corresponding tables in the MySQL database. We created functions for each table to insert
# data row by row while maintaining referential integrity. We followed these steps:
# - Defined SQL INSERT statements for each table, specifying the columns to insert data into.
# - Iterated through the preprocessed DataFrame row by row.
# - For each row, extracted values from the DataFrame and inserted them into the respective table.

Export ER-Diagram: Once the tables are populated export the entity relationship diagram of database in PNJ fromat.
"""

